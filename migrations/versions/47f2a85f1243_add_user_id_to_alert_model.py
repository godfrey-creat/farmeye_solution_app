"""Add user_id to Alert model

Revision ID: 47f2a85f1243
Revises: 2a3c6495ef9b
Create Date: 2025-05-10 09:44:32.170799

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector
from sqlalchemy import exc


# revision identifiers, used by Alembic.
revision = '47f2a85f1243'
down_revision = '2a3c6495ef9b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    tables = inspector.get_table_names()
    
    # Check for and drop any temporary tables from failed migrations
    temp_tables = [t for t in tables if t.startswith('_alembic_tmp_')]
    for temp_table in temp_tables:
        try:
            op.drop_table(temp_table)
            print(f"Dropped temporary table: {temp_table}")
        except:
            print(f"Error dropping temporary table: {temp_table}")
    
    if 'crop_health' not in tables:
        op.create_table('crop_health',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('farm_id', sa.Integer(), nullable=False),
        sa.Column('assessment_date', sa.DateTime(), nullable=True),
        sa.Column('status', sa.String(length=50), nullable=False),
        sa.Column('notes', sa.Text(), nullable=True),
        sa.Column('image_url', sa.String(length=200), nullable=True),
        sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    
    if 'sensors' not in tables:
        op.create_table('sensors',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('farm_id', sa.Integer(), nullable=False),
        sa.Column('sensor_type', sa.String(length=50), nullable=False),
        sa.Column('location', sa.String(length=200), nullable=False),
        sa.Column('install_date', sa.DateTime(), nullable=True),
        sa.Column('last_maintenance', sa.DateTime(), nullable=True),
        sa.Column('status', sa.String(length=20), nullable=True),
        sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    
    if 'weather_data' not in tables:
        op.create_table('weather_data',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('farm_id', sa.Integer(), nullable=False),
        sa.Column('timestamp', sa.DateTime(), nullable=True),
        sa.Column('temperature', sa.Float(), nullable=False),
        sa.Column('humidity', sa.Float(), nullable=False),
        sa.Column('rainfall', sa.Float(), nullable=True),
        sa.Column('wind_speed', sa.Float(), nullable=True),
        sa.Column('condition', sa.String(length=50), nullable=False),
        sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    
    # Continue with column alterations which should be safe to run multiple times
    # Wrap each batch operation in try-except to handle errors
    try:
        with op.batch_alter_table('alerts', schema=None) as batch_op:
            try:
                batch_op.add_column(sa.Column('status', sa.String(length=20), nullable=True))
            except (sa.exc.OperationalError, exc.InternalError):
                print("Column 'status' might already exist in 'alerts'")
                
            batch_op.alter_column('farm_id',
                   existing_type=sa.INTEGER(),
                   nullable=False)
            batch_op.alter_column('user_id',
                   existing_type=sa.INTEGER(),
                   nullable=False)
            batch_op.alter_column('alert_type',
                   existing_type=sa.VARCHAR(length=50),
                   nullable=False)
            batch_op.alter_column('message',
                   existing_type=sa.TEXT(),
                   nullable=False)
    except Exception as e:
        print(f"Error altering alerts table: {str(e)}")

    try:
        with op.batch_alter_table('farm_images', schema=None) as batch_op:
            try:
                batch_op.add_column(sa.Column('image_url', sa.String(length=200), nullable=False))
            except (sa.exc.OperationalError, exc.InternalError):
                print("Column 'image_url' might already exist in 'farm_images'")
                
            batch_op.alter_column('farm_id',
                   existing_type=sa.INTEGER(),
                   nullable=False)
    except Exception as e:
        print(f"Error altering farm_images table: {str(e)}")

    try:
        with op.batch_alter_table('farms', schema=None) as batch_op:
            try:
                batch_op.add_column(sa.Column('size', sa.Float(), nullable=False))
            except (sa.exc.OperationalError, exc.InternalError):
                print("Column 'size' might already exist in 'farms'")
                
            batch_op.alter_column('name',
                   existing_type=sa.VARCHAR(length=100),
                   nullable=False)
            batch_op.alter_column('location',
                   existing_type=sa.VARCHAR(length=200),
                   nullable=False)
            batch_op.alter_column('crop_type',
                   existing_type=sa.VARCHAR(length=100),
                   type_=sa.String(length=50),
                   nullable=False)
            batch_op.alter_column('user_id',
                   existing_type=sa.INTEGER(),
                   nullable=False)
    except Exception as e:
        print(f"Error altering farms table: {str(e)}")

    try:
        with op.batch_alter_table('sensor_data', schema=None) as batch_op:
            try:
                batch_op.add_column(sa.Column('sensor_id', sa.Integer(), nullable=False))
                batch_op.add_column(sa.Column('status', sa.String(length=20), nullable=True))
            except (sa.exc.OperationalError, exc.InternalError):
                print("Some columns might already exist in 'sensor_data'")
                
            batch_op.alter_column('value',
                   existing_type=sa.FLOAT(),
                   nullable=False)
            try:
                batch_op.create_foreign_key('fk_sensor_data_sensor_id_sensors', 'sensors', ['sensor_id'], ['id'])
            except (sa.exc.OperationalError, exc.InternalError):
                print("Foreign key constraint might already exist")
    except Exception as e:
        print(f"Error altering sensor_data table: {str(e)}")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('sensor_data', schema=None) as batch_op:
        batch_op.drop_constraint('fk_sensor_data_sensor_id_sensors', type_='foreignkey')
        batch_op.alter_column('value',
               existing_type=sa.FLOAT(),
               nullable=True)
        batch_op.drop_column('status')
        batch_op.drop_column('sensor_id')

    with op.batch_alter_table('farms', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('crop_type',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               nullable=True)
        batch_op.alter_column('location',
               existing_type=sa.VARCHAR(length=200),
               nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
        batch_op.drop_column('size')

    with op.batch_alter_table('farm_images', schema=None) as batch_op:
        batch_op.alter_column('farm_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('image_url')

    with op.batch_alter_table('alerts', schema=None) as batch_op:
        batch_op.alter_column('message',
               existing_type=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('alert_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('farm_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('status')

    op.drop_table('weather_data')
    op.drop_table('sensors')
    op.drop_table('crop_health')
    # ### end Alembic commands ###
